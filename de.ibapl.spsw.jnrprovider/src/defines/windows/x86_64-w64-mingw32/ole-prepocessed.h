# 1 "c.c"
# 1 "<built-in>"
#define __STDC__ 1
#define __STDC_VERSION__ 201112L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 7
#define __GNUC_MINOR__ 3
#define __GNUC_PATCHLEVEL__ 0
#define __VERSION__ "7.3-win32 20180318"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __pic__ 1
#define __PIC__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 16
#define __SIZEOF_SIZE_T__ 8
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 16
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 8
#define __SIZE_TYPE__ long long unsigned int
#define __PTRDIFF_TYPE__ long long int
#define __WCHAR_TYPE__ short unsigned int
#define __WINT_TYPE__ short unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __INT_FAST16_TYPE__ short int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned char
#define __UINT_FAST16_TYPE__ short unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ long long int
#define __UINTPTR_TYPE__ long long unsigned int
#define __has_include(STR) __has_include__(STR)
#define __has_include_next(STR) __has_include_next__(STR)
#define __GXX_ABI_VERSION 1011
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffff
#define __WCHAR_MIN__ 0
#define __WINT_MAX__ 0xffff
#define __WINT_MIN__ 0
#define __PTRDIFF_MAX__ 0x7fffffffffffffffLL
#define __SIZE_MAX__ 0xffffffffffffffffULL
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 16
#define __WINT_WIDTH__ 16
#define __PTRDIFF_WIDTH__ 64
#define __SIZE_WIDTH__ 64
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffff
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffU
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __INT32_C(c) c
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __UINT32_C(c) c ## U
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7f
#define __INT_FAST8_WIDTH__ 8
#define __INT_FAST16_MAX__ 0x7fff
#define __INT_FAST16_WIDTH__ 16
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xff
#define __UINT_FAST16_MAX__ 0xffff
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffffffffffffLL
#define __INTPTR_WIDTH__ 64
#define __UINTPTR_MAX__ 0xffffffffffffffffULL
#define __GCC_IEC_559 2
#define __GCC_IEC_559_COMPLEX 2
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.79769313486231570814527423731704357e+308L)
#define __DBL_MIN__ ((double)2.22507385850720138309023271733240406e-308L)
#define __DBL_EPSILON__ ((double)2.22044604925031308084726333618164062e-16L)
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544176568792868221372e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 64
#define __LDBL_DIG__ 18
#define __LDBL_MIN_EXP__ (-16381)
#define __LDBL_MIN_10_EXP__ (-4931)
#define __LDBL_MAX_EXP__ 16384
#define __LDBL_MAX_10_EXP__ 4932
#define __DECIMAL_DIG__ 21
#define __LDBL_DECIMAL_DIG__ 21
#define __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
#define __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
#define __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT128_MANT_DIG__ 113
#define __FLT128_DIG__ 33
#define __FLT128_MIN_EXP__ (-16381)
#define __FLT128_MIN_10_EXP__ (-4931)
#define __FLT128_MAX_EXP__ 16384
#define __FLT128_MAX_10_EXP__ 4932
#define __FLT128_DECIMAL_DIG__ 36
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
#define __FLT128_HAS_DENORM__ 1
#define __FLT128_HAS_INFINITY__ 1
#define __FLT128_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __FLT64X_MANT_DIG__ 64
#define __FLT64X_DIG__ 18
#define __FLT64X_MIN_EXP__ (-16381)
#define __FLT64X_MIN_10_EXP__ (-4931)
#define __FLT64X_MAX_EXP__ 16384
#define __FLT64X_MAX_10_EXP__ 4932
#define __FLT64X_DECIMAL_DIG__ 21
#define __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
#define __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
#define __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
#define __FLT64X_HAS_DENORM__ 1
#define __FLT64X_HAS_INFINITY__ 1
#define __FLT64X_HAS_QUIET_NAN__ 1
#define __DEC32_MANT_DIG__ 7
#define __DEC32_MIN_EXP__ (-94)
#define __DEC32_MAX_EXP__ 97
#define __DEC32_MIN__ 1E-95DF
#define __DEC32_MAX__ 9.999999E96DF
#define __DEC32_EPSILON__ 1E-6DF
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __DEC64_MANT_DIG__ 16
#define __DEC64_MIN_EXP__ (-382)
#define __DEC64_MAX_EXP__ 385
#define __DEC64_MIN__ 1E-383DD
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __DEC64_EPSILON__ 1E-15DD
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __DEC128_MIN_EXP__ (-6142)
#define __DEC128_MAX_EXP__ 6145
#define __DEC128_MIN__ 1E-6143DL
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __DEC128_EPSILON__ 1E-33DL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __NO_INLINE__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_INT128__ 16
#define __SIZEOF_WCHAR_T__ 2
#define __SIZEOF_WINT_T__ 2
#define __SIZEOF_PTRDIFF_T__ 8
#define __amd64 1
#define __amd64__ 1
#define __x86_64 1
#define __x86_64__ 1
#define __SIZEOF_FLOAT80__ 16
#define __SIZEOF_FLOAT128__ 16
#define __ATOMIC_HLE_ACQUIRE 65536
#define __ATOMIC_HLE_RELEASE 131072
#define __GCC_ASM_FLAG_OUTPUTS__ 1
#define __k8 1
#define __k8__ 1
#define __code_model_medium__ 1
#define __MMX__ 1
#define __SSE__ 1
#define __SSE2__ 1
#define __FXSR__ 1
#define __SSE_MATH__ 1
#define __SSE2_MATH__ 1
#define __SEG_FS 1
#define __SEG_GS 1
#define __SEH__ 1
#define __stdcall __attribute__((__stdcall__))
#define __fastcall __attribute__((__fastcall__))
#define __thiscall __attribute__((__thiscall__))
#define __cdecl __attribute__((__cdecl__))
#define _stdcall __attribute__((__stdcall__))
#define _fastcall __attribute__((__fastcall__))
#define _thiscall __attribute__((__thiscall__))
#define _cdecl __attribute__((__cdecl__))
#define __GXX_MERGED_TYPEINFO_NAMES 0
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __MSVCRT__ 1
#define __MINGW32__ 1
#define _WIN32 1
#define __WIN32 1
#define __WIN32__ 1
#define WIN32 1
#define __WINNT 1
#define __WINNT__ 1
#define WINNT 1
#define _INTEGRAL_MAX_BITS 64
#define __MINGW64__ 1
#define __WIN64 1
#define __WIN64__ 1
#define WIN64 1
#define _WIN64 1
#define __declspec(x) __attribute__((x))
#define __DECIMAL_BID_FORMAT__ 1
# 1 "<command-line>"
#undef _REENTRANT
# 1 "c.c"
#include <ole.h>
# 1 "c.c"
# 1 "/usr/share/mingw-w64/include/ole.h" 1 3




#include <winapifamily.h>
# 5 "/usr/share/mingw-w64/include/ole.h" 3
# 1 "/usr/share/mingw-w64/include/winapifamily.h" 1 3






#define _INC_WINAPIFAMILY 

#define WINAPI_PARTITION_DESKTOP 0x1
#define WINAPI_PARTITION_APP 0x2

#define WINAPI_FAMILY_APP WINAPI_PARTITION_APP
#define WINAPI_FAMILY_DESKTOP_APP (WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_APP)




#define WINAPI_FAMILY WINAPI_FAMILY_DESKTOP_APP


#define WINAPI_FAMILY_PARTITION(v) ((WINAPI_FAMILY & v) == v)
#define WINAPI_FAMILY_ONE_PARTITION(vset,v) ((WINAPI_FAMILY & vset) == v)
# 6 "/usr/share/mingw-w64/include/ole.h" 2 3


#define _INC_OLE 






#define WINAPI PASCAL
#define CALLBACK PASCAL
#define LPCSTR LPSTR
#define LRESULT LONG_PTR
#define HGLOBAL HANDLE






#define OLE_LPCSTR LPSTR
#define OLE_CONST 


#define LRESULT LONG_PTR
#define HGLOBAL HANDLE

#define OT_LINK __MSABI_LONG(1)
#define OT_EMBEDDED __MSABI_LONG(2)
#define OT_STATIC __MSABI_LONG(3)

#define OLEVERB_PRIMARY 0

  
# 39 "/usr/share/mingw-w64/include/ole.h" 3
 typedef struct _OLETARGETDEVICE {
    USHORT otdDeviceNameOffset;
    USHORT otdDriverNameOffset;
    USHORT otdPortNameOffset;
    USHORT otdExtDevmodeOffset;
    USHORT otdExtDevmodeSize;
    USHORT otdEnvironmentOffset;
    USHORT otdEnvironmentSize;
    BYTE otdData[1];
  } OLETARGETDEVICE;
  typedef OLETARGETDEVICE *LPOLETARGETDEVICE;

#define OF_SET 0x1
#define OF_GET 0x2
#define OF_HANDLER 0x4

  typedef enum {
    OLE_OK,
    OLE_WAIT_FOR_RELEASE,
    OLE_BUSY,
    OLE_ERROR_PROTECT_ONLY,
    OLE_ERROR_MEMORY,
    OLE_ERROR_STREAM,
    OLE_ERROR_STATIC,
    OLE_ERROR_BLANK,
    OLE_ERROR_DRAW,
    OLE_ERROR_METAFILE,
    OLE_ERROR_ABORT,
    OLE_ERROR_CLIPBOARD,
    OLE_ERROR_FORMAT,
    OLE_ERROR_OBJECT,
    OLE_ERROR_OPTION,
    OLE_ERROR_PROTOCOL,
    OLE_ERROR_ADDRESS,
    OLE_ERROR_NOT_EQUAL,
    OLE_ERROR_HANDLE,
    OLE_ERROR_GENERIC,
    OLE_ERROR_CLASS,
    OLE_ERROR_SYNTAX,
    OLE_ERROR_DATATYPE,
    OLE_ERROR_PALETTE,
    OLE_ERROR_NOT_LINK,
    OLE_ERROR_NOT_EMPTY,
    OLE_ERROR_SIZE,
    OLE_ERROR_DRIVE,
    OLE_ERROR_NETWORK,
    OLE_ERROR_NAME,
    OLE_ERROR_TEMPLATE,
    OLE_ERROR_NEW,
    OLE_ERROR_EDIT,
    OLE_ERROR_OPEN,
    OLE_ERROR_NOT_OPEN,
    OLE_ERROR_LAUNCH,
    OLE_ERROR_COMM,
    OLE_ERROR_TERMINATE,
    OLE_ERROR_COMMAND,
    OLE_ERROR_SHOW,
    OLE_ERROR_DOVERB,
    OLE_ERROR_ADVISE_NATIVE,
    OLE_ERROR_ADVISE_PICT,
    OLE_ERROR_ADVISE_RENAME,
    OLE_ERROR_POKE_NATIVE,
    OLE_ERROR_REQUEST_NATIVE,
    OLE_ERROR_REQUEST_PICT,
    OLE_ERROR_SERVER_BLOCKED,
    OLE_ERROR_REGISTRATION,
    OLE_ERROR_ALREADY_REGISTERED,
    OLE_ERROR_TASK,
    OLE_ERROR_OUTOFDATE,
    OLE_ERROR_CANT_UPDATE_CLIENT,
    OLE_ERROR_UPDATE,
    OLE_ERROR_SETDATA_FORMAT,
    OLE_ERROR_STATIC_FROM_OTHER_OS,
    OLE_ERROR_FILE_VER,
    OLE_WARN_DELETE_DATA = 1000
  } OLESTATUS;

  typedef enum {
    OLE_CHANGED,
    OLE_SAVED,
    OLE_CLOSED,
    OLE_RENAMED,
    OLE_QUERY_PAINT,
    OLE_RELEASE,
    OLE_QUERY_RETRY
  } OLE_NOTIFICATION;

  typedef enum {
    OLE_NONE,
    OLE_DELETE,
    OLE_LNKPASTE,
    OLE_EMBPASTE,
    OLE_SHOW,
    OLE_RUN,
    OLE_ACTIVATE,
    OLE_UPDATE,
    OLE_CLOSE,
    OLE_RECONNECT,
    OLE_SETUPDATEOPTIONS,
    OLE_SERVERUNLAUNCH,
    OLE_LOADFROMSTREAM,
    OLE_SETDATA,
    OLE_REQUESTDATA,
    OLE_OTHER,
    OLE_CREATE,
    OLE_CREATEFROMTEMPLATE,
    OLE_CREATELINKFROMFILE,
    OLE_COPYFROMLNK,
    OLE_CREATEFROMFILE,
    OLE_CREATEINVISIBLE
  } OLE_RELEASE_METHOD;

  typedef enum {
    olerender_none,
    olerender_draw,
    olerender_format
  } OLEOPT_RENDER;

  typedef WORD OLECLIPFORMAT;

  typedef enum {
    oleupdate_always,
    oleupdate_onsave,




    oleupdate_oncall

  } OLEOPT_UPDATE;

  typedef HANDLE HOBJECT;
  typedef LONG_PTR LHSERVER;
  typedef LONG_PTR LHCLIENTDOC;
  typedef LONG_PTR LHSERVERDOC;
  typedef struct _OLEOBJECT *LPOLEOBJECT;
  typedef struct _OLESTREAM *LPOLESTREAM;
  typedef struct _OLECLIENT *LPOLECLIENT;
  typedef struct _OLEOBJECTVTBL {
    void *(PASCAL *QueryProtocol) (LPOLEOBJECT, LPSTR);
    OLESTATUS (PASCAL *Release) (LPOLEOBJECT);
    OLESTATUS (PASCAL *Show) (LPOLEOBJECT, WINBOOL);
    OLESTATUS (PASCAL *DoVerb) (LPOLEOBJECT, UINT, WINBOOL, WINBOOL);
    OLESTATUS (PASCAL *GetData) (LPOLEOBJECT, OLECLIPFORMAT, HANDLE *);
    OLESTATUS (PASCAL *SetData) (LPOLEOBJECT, OLECLIPFORMAT, HANDLE);
    OLESTATUS (PASCAL *SetTargetDevice) (LPOLEOBJECT, HANDLE);
    OLESTATUS (PASCAL *SetBounds) (LPOLEOBJECT, RECT *);
    OLECLIPFORMAT (PASCAL *EnumFormats) (LPOLEOBJECT, OLECLIPFORMAT);
    OLESTATUS (PASCAL *SetColorScheme) (LPOLEOBJECT, LOGPALETTE *);

    OLESTATUS (PASCAL *Delete) (LPOLEOBJECT);
    OLESTATUS (PASCAL *SetHostNames) (LPOLEOBJECT, LPSTR, LPSTR);
    OLESTATUS (PASCAL *SaveToStream) (LPOLEOBJECT, LPOLESTREAM);
    OLESTATUS (PASCAL *Clone) (LPOLEOBJECT, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
    OLESTATUS (PASCAL *CopyFromLink) (LPOLEOBJECT, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
    OLESTATUS (PASCAL *Equal) (LPOLEOBJECT, LPOLEOBJECT);
    OLESTATUS (PASCAL *CopyToClipboard) (LPOLEOBJECT);
    OLESTATUS (PASCAL *Draw) (LPOLEOBJECT, HDC, RECT *, RECT *, HDC);
    OLESTATUS (PASCAL *Activate) (LPOLEOBJECT, UINT, WINBOOL, WINBOOL, HWND, RECT *);
    OLESTATUS (PASCAL *Execute) (LPOLEOBJECT, HANDLE, UINT);
    OLESTATUS (PASCAL *Close) (LPOLEOBJECT);
    OLESTATUS (PASCAL *Update) (LPOLEOBJECT);
    OLESTATUS (PASCAL *Reconnect) (LPOLEOBJECT);
    OLESTATUS (PASCAL *ObjectConvert) (LPOLEOBJECT, LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
    OLESTATUS (PASCAL *GetLinkUpdateOptions) (LPOLEOBJECT, OLEOPT_UPDATE *);
    OLESTATUS (PASCAL *SetLinkUpdateOptions) (LPOLEOBJECT, OLEOPT_UPDATE);
    OLESTATUS (PASCAL *Rename) (LPOLEOBJECT, LPSTR);
    OLESTATUS (PASCAL *QueryName) (LPOLEOBJECT, LPSTR, UINT *);
    OLESTATUS (PASCAL *QueryType) (LPOLEOBJECT, LONG *);
    OLESTATUS (PASCAL *QueryBounds) (LPOLEOBJECT, RECT *);
    OLESTATUS (PASCAL *QuerySize) (LPOLEOBJECT, DWORD *);
    OLESTATUS (PASCAL *QueryOpen) (LPOLEOBJECT);
    OLESTATUS (PASCAL *QueryOutOfDate) (LPOLEOBJECT);
    OLESTATUS (PASCAL *QueryReleaseStatus) (LPOLEOBJECT);
    OLESTATUS (PASCAL *QueryReleaseError) (LPOLEOBJECT);
    OLE_RELEASE_METHOD (PASCAL *QueryReleaseMethod) (LPOLEOBJECT);
    OLESTATUS (PASCAL *RequestData) (LPOLEOBJECT, OLECLIPFORMAT);
    OLESTATUS (PASCAL *ObjectLong) (LPOLEOBJECT, UINT, LONG *);
    OLESTATUS (PASCAL *ChangeData) (LPOLEOBJECT, HANDLE, LPOLECLIENT, WINBOOL);

  } OLEOBJECTVTBL;

  typedef OLEOBJECTVTBL *LPOLEOBJECTVTBL;

  typedef struct _OLEOBJECT {
    LPOLEOBJECTVTBL lpvtbl;
  } OLEOBJECT;


  typedef struct _OLECLIENTVTBL {
    int (PASCAL *CallBack) (LPOLECLIENT, OLE_NOTIFICATION, LPOLEOBJECT);
  } OLECLIENTVTBL;

  typedef OLECLIENTVTBL *LPOLECLIENTVTBL;

  typedef struct _OLECLIENT {
    LPOLECLIENTVTBL lpvtbl;
  } OLECLIENT;

  typedef struct _OLESTREAMVTBL {
    DWORD (PASCAL *Get) (LPOLESTREAM, void *, DWORD);
    DWORD (PASCAL *Put) (LPOLESTREAM, void *, DWORD);
  } OLESTREAMVTBL;
  typedef OLESTREAMVTBL *LPOLESTREAMVTBL;

  typedef struct _OLESTREAM {
    LPOLESTREAMVTBL lpstbl;
  } OLESTREAM;


  OLESTATUS PASCAL OleDelete (LPOLEOBJECT);
  OLESTATUS PASCAL OleRelease (LPOLEOBJECT);
  OLESTATUS PASCAL OleSaveToStream (LPOLEOBJECT, LPOLESTREAM);
  OLESTATUS PASCAL OleEqual (LPOLEOBJECT, LPOLEOBJECT);
  OLESTATUS PASCAL OleCopyToClipboard (LPOLEOBJECT);
  OLESTATUS PASCAL OleSetHostNames (LPOLEOBJECT, LPSTR, LPSTR);
  OLESTATUS PASCAL OleSetTargetDevice (LPOLEOBJECT, HANDLE);
  OLESTATUS PASCAL OleSetBounds (LPOLEOBJECT, const RECT *);
  OLESTATUS PASCAL OleSetColorScheme (LPOLEOBJECT, const LOGPALETTE *);
  OLESTATUS PASCAL OleQueryBounds (LPOLEOBJECT, RECT *);
  OLESTATUS PASCAL OleQuerySize (LPOLEOBJECT, DWORD *);
  OLESTATUS PASCAL OleDraw (LPOLEOBJECT, HDC, const RECT *, const RECT *, HDC);
  OLESTATUS PASCAL OleQueryOpen (LPOLEOBJECT);
  OLESTATUS PASCAL OleActivate (LPOLEOBJECT, UINT, WINBOOL, WINBOOL, HWND, const RECT *);
  OLESTATUS PASCAL OleExecute (LPOLEOBJECT, HANDLE, UINT);
  OLESTATUS PASCAL OleClose (LPOLEOBJECT);
  OLESTATUS PASCAL OleUpdate (LPOLEOBJECT);
  OLESTATUS PASCAL OleReconnect (LPOLEOBJECT);
  OLESTATUS PASCAL OleGetLinkUpdateOptions (LPOLEOBJECT, OLEOPT_UPDATE *);
  OLESTATUS PASCAL OleSetLinkUpdateOptions (LPOLEOBJECT, OLEOPT_UPDATE);
  void *PASCAL OleQueryProtocol (LPOLEOBJECT, LPSTR);
  OLESTATUS PASCAL OleQueryReleaseStatus (LPOLEOBJECT);
  OLESTATUS PASCAL OleQueryReleaseError (LPOLEOBJECT);
  OLE_RELEASE_METHOD PASCAL OleQueryReleaseMethod (LPOLEOBJECT);
  OLESTATUS PASCAL OleQueryType (LPOLEOBJECT, LONG *);
  DWORD PASCAL OleQueryClientVersion (void);
  DWORD PASCAL OleQueryServerVersion (void);
  OLECLIPFORMAT PASCAL OleEnumFormats (LPOLEOBJECT, OLECLIPFORMAT);
  OLESTATUS PASCAL OleGetData (LPOLEOBJECT, OLECLIPFORMAT, HANDLE *);
  OLESTATUS PASCAL OleSetData (LPOLEOBJECT, OLECLIPFORMAT, HANDLE);
  OLESTATUS PASCAL OleQueryOutOfDate (LPOLEOBJECT);
  OLESTATUS PASCAL OleRequestData (LPOLEOBJECT, OLECLIPFORMAT);
  OLESTATUS PASCAL OleQueryLinkFromClip (LPSTR, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleQueryCreateFromClip (LPSTR, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleCreateFromClip (LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleCreateLinkFromClip (LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleCreateFromFile (LPSTR, LPOLECLIENT, LPSTR, LPSTR, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleCreateLinkFromFile (LPSTR, LPOLECLIENT, LPSTR, LPSTR, LPSTR, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleLoadFromStream (LPOLESTREAM, LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
  OLESTATUS PASCAL OleCreate (LPSTR, LPOLECLIENT, LPSTR, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleCreateInvisible (LPSTR, LPOLECLIENT, LPSTR, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT, WINBOOL);
  OLESTATUS PASCAL OleCreateFromTemplate (LPSTR, LPOLECLIENT, LPSTR, LHCLIENTDOC, LPSTR, LPOLEOBJECT *, OLEOPT_RENDER, OLECLIPFORMAT);
  OLESTATUS PASCAL OleClone (LPOLEOBJECT, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
  OLESTATUS PASCAL OleCopyFromLink (LPOLEOBJECT, LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
  OLESTATUS PASCAL OleObjectConvert (LPOLEOBJECT, LPSTR, LPOLECLIENT, LHCLIENTDOC, LPSTR, LPOLEOBJECT *);
  OLESTATUS PASCAL OleRename (LPOLEOBJECT, LPSTR);
  OLESTATUS PASCAL OleQueryName (LPOLEOBJECT lpobj, LPSTR lpBuf, UINT *lpcbBuf);
  OLESTATUS PASCAL OleRevokeObject (LPOLECLIENT);
  WINBOOL PASCAL OleIsDcMeta (HDC);
  OLESTATUS PASCAL OleRegisterClientDoc (LPSTR, LPSTR, LONG, LHCLIENTDOC *);
  OLESTATUS PASCAL OleRevokeClientDoc (LHCLIENTDOC);
  OLESTATUS PASCAL OleRenameClientDoc (LHCLIENTDOC, LPSTR);
  OLESTATUS PASCAL OleRevertClientDoc (LHCLIENTDOC);
  OLESTATUS PASCAL OleSavedClientDoc (LHCLIENTDOC);
  OLESTATUS PASCAL OleEnumObjects (LHCLIENTDOC, LPOLEOBJECT *);

  typedef enum {
    OLE_SERVER_MULTI,
    OLE_SERVER_SINGLE
  } OLE_SERVER_USE;
  typedef struct _OLESERVER *LPOLESERVER;

  typedef struct _OLESERVERDOC *LPOLESERVERDOC;

  OLESTATUS PASCAL OleRegisterServer (LPSTR, LPOLESERVER, LHSERVER *, HINSTANCE, OLE_SERVER_USE);
  OLESTATUS PASCAL OleRevokeServer (LHSERVER);
  OLESTATUS PASCAL OleBlockServer (LHSERVER);
  OLESTATUS PASCAL OleUnblockServer (LHSERVER, WINBOOL *);
  OLESTATUS PASCAL OleLockServer (LPOLEOBJECT, LHSERVER *);
  OLESTATUS PASCAL OleUnlockServer (LHSERVER);
  OLESTATUS PASCAL OleRegisterServerDoc (LHSERVER, LPSTR, LPOLESERVERDOC, LHSERVERDOC *);
  OLESTATUS PASCAL OleRevokeServerDoc (LHSERVERDOC);
  OLESTATUS PASCAL OleRenameServerDoc (LHSERVERDOC, LPSTR);
  OLESTATUS PASCAL OleRevertServerDoc (LHSERVERDOC);
  OLESTATUS PASCAL OleSavedServerDoc (LHSERVERDOC);


  typedef struct _OLESERVERVTBL {
    OLESTATUS (PASCAL *Open) (LPOLESERVER, LHSERVERDOC, LPSTR, LPOLESERVERDOC *);
    OLESTATUS (PASCAL *Create) (LPOLESERVER, LHSERVERDOC, LPSTR, LPSTR, LPOLESERVERDOC *);
    OLESTATUS (PASCAL *CreateFromTemplate) (LPOLESERVER, LHSERVERDOC, LPSTR, LPSTR, LPSTR, LPOLESERVERDOC *);
    OLESTATUS (PASCAL *Edit) (LPOLESERVER, LHSERVERDOC, LPSTR, LPSTR, LPOLESERVERDOC *);
    _Analysis_noreturn_ OLESTATUS (PASCAL *Exit) (LPOLESERVER);
    OLESTATUS (PASCAL *Release) (LPOLESERVER);
    OLESTATUS (PASCAL *Execute) (LPOLESERVER, HANDLE);
  } OLESERVERVTBL;
  typedef OLESERVERVTBL *LPOLESERVERVTBL;

  typedef struct _OLESERVER {
    LPOLESERVERVTBL lpvtbl;
  } OLESERVER;

  typedef struct _OLESERVERDOCVTBL {
    OLESTATUS (PASCAL *Save) (LPOLESERVERDOC);
    OLESTATUS (PASCAL *Close) (LPOLESERVERDOC);
    OLESTATUS (PASCAL *SetHostNames) (LPOLESERVERDOC, LPSTR, LPSTR);
    OLESTATUS (PASCAL *SetDocDimensions) (LPOLESERVERDOC, RECT *);
    OLESTATUS (PASCAL *GetObject) (LPOLESERVERDOC, LPSTR, LPOLEOBJECT *, LPOLECLIENT);
    OLESTATUS (PASCAL *Release) (LPOLESERVERDOC);
    OLESTATUS (PASCAL *SetColorScheme) (LPOLESERVERDOC, LOGPALETTE *);
    OLESTATUS (PASCAL *Execute) (LPOLESERVERDOC, HANDLE);
  } OLESERVERDOCVTBL;
  typedef OLESERVERDOCVTBL *LPOLESERVERDOCVTBL;

  typedef struct _OLESERVERDOC {
    LPOLESERVERDOCVTBL lpvtbl;
  } OLESERVERDOC;
# 1 "c.c" 2
